// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stackoverflow-clone/ent/answer"
	"stackoverflow-clone/ent/comment"
	"stackoverflow-clone/ent/question"
	"stackoverflow-clone/ent/user"
	"stackoverflow-clone/ent/vote"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerCreate is the builder for creating a Answer entity.
type AnswerCreate struct {
	config
	mutation *AnswerMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (ac *AnswerCreate) SetContent(s string) *AnswerCreate {
	ac.mutation.SetContent(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AnswerCreate) SetCreatedAt(t time.Time) *AnswerCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AnswerCreate) SetUpdatedAt(t time.Time) *AnswerCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetIsAccepted sets the "is_accepted" field.
func (ac *AnswerCreate) SetIsAccepted(b bool) *AnswerCreate {
	ac.mutation.SetIsAccepted(b)
	return ac
}

// SetNillableIsAccepted sets the "is_accepted" field if the given value is not nil.
func (ac *AnswerCreate) SetNillableIsAccepted(b *bool) *AnswerCreate {
	if b != nil {
		ac.SetIsAccepted(*b)
	}
	return ac
}

// SetVoteCount sets the "vote_count" field.
func (ac *AnswerCreate) SetVoteCount(i int) *AnswerCreate {
	ac.mutation.SetVoteCount(i)
	return ac
}

// SetNillableVoteCount sets the "vote_count" field if the given value is not nil.
func (ac *AnswerCreate) SetNillableVoteCount(i *int) *AnswerCreate {
	if i != nil {
		ac.SetVoteCount(*i)
	}
	return ac
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (ac *AnswerCreate) SetAuthorID(id int) *AnswerCreate {
	ac.mutation.SetAuthorID(id)
	return ac
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (ac *AnswerCreate) SetNillableAuthorID(id *int) *AnswerCreate {
	if id != nil {
		ac = ac.SetAuthorID(*id)
	}
	return ac
}

// SetAuthor sets the "author" edge to the User entity.
func (ac *AnswerCreate) SetAuthor(u *User) *AnswerCreate {
	return ac.SetAuthorID(u.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (ac *AnswerCreate) SetQuestionID(id int) *AnswerCreate {
	ac.mutation.SetQuestionID(id)
	return ac
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (ac *AnswerCreate) SetNillableQuestionID(id *int) *AnswerCreate {
	if id != nil {
		ac = ac.SetQuestionID(*id)
	}
	return ac
}

// SetQuestion sets the "question" edge to the Question entity.
func (ac *AnswerCreate) SetQuestion(q *Question) *AnswerCreate {
	return ac.SetQuestionID(q.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (ac *AnswerCreate) AddCommentIDs(ids ...int) *AnswerCreate {
	ac.mutation.AddCommentIDs(ids...)
	return ac
}

// AddComments adds the "comments" edges to the Comment entity.
func (ac *AnswerCreate) AddComments(c ...*Comment) *AnswerCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ac.AddCommentIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (ac *AnswerCreate) AddVoteIDs(ids ...int) *AnswerCreate {
	ac.mutation.AddVoteIDs(ids...)
	return ac
}

// AddVotes adds the "votes" edges to the Vote entity.
func (ac *AnswerCreate) AddVotes(v ...*Vote) *AnswerCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return ac.AddVoteIDs(ids...)
}

// Mutation returns the AnswerMutation object of the builder.
func (ac *AnswerCreate) Mutation() *AnswerMutation {
	return ac.mutation
}

// Save creates the Answer in the database.
func (ac *AnswerCreate) Save(ctx context.Context) (*Answer, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnswerCreate) SaveX(ctx context.Context) *Answer {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AnswerCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AnswerCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AnswerCreate) defaults() {
	if _, ok := ac.mutation.IsAccepted(); !ok {
		v := answer.DefaultIsAccepted
		ac.mutation.SetIsAccepted(v)
	}
	if _, ok := ac.mutation.VoteCount(); !ok {
		v := answer.DefaultVoteCount
		ac.mutation.SetVoteCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AnswerCreate) check() error {
	if _, ok := ac.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Answer.content"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Answer.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Answer.updated_at"`)}
	}
	if _, ok := ac.mutation.IsAccepted(); !ok {
		return &ValidationError{Name: "is_accepted", err: errors.New(`ent: missing required field "Answer.is_accepted"`)}
	}
	if _, ok := ac.mutation.VoteCount(); !ok {
		return &ValidationError{Name: "vote_count", err: errors.New(`ent: missing required field "Answer.vote_count"`)}
	}
	return nil
}

func (ac *AnswerCreate) sqlSave(ctx context.Context) (*Answer, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AnswerCreate) createSpec() (*Answer, *sqlgraph.CreateSpec) {
	var (
		_node = &Answer{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(answer.Table, sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Content(); ok {
		_spec.SetField(answer.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(answer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(answer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.IsAccepted(); ok {
		_spec.SetField(answer.FieldIsAccepted, field.TypeBool, value)
		_node.IsAccepted = value
	}
	if value, ok := ac.mutation.VoteCount(); ok {
		_spec.SetField(answer.FieldVoteCount, field.TypeInt, value)
		_node.VoteCount = value
	}
	if nodes := ac.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.AuthorTable,
			Columns: []string{answer.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_answers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_answers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.CommentsTable,
			Columns: answer.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.VotesTable,
			Columns: answer.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AnswerCreateBulk is the builder for creating many Answer entities in bulk.
type AnswerCreateBulk struct {
	config
	err      error
	builders []*AnswerCreate
}

// Save creates the Answer entities in the database.
func (acb *AnswerCreateBulk) Save(ctx context.Context) ([]*Answer, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Answer, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AnswerCreateBulk) SaveX(ctx context.Context) []*Answer {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AnswerCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
