// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnswersColumns holds the columns for the "answers" table.
	AnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_accepted", Type: field.TypeBool, Default: false},
		{Name: "vote_count", Type: field.TypeInt, Default: 0},
		{Name: "question_answers", Type: field.TypeInt, Nullable: true},
		{Name: "user_answers", Type: field.TypeInt, Nullable: true},
	}
	// AnswersTable holds the schema information for the "answers" table.
	AnswersTable = &schema.Table{
		Name:       "answers",
		Columns:    AnswersColumns,
		PrimaryKey: []*schema.Column{AnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "answers_questions_answers",
				Columns:    []*schema.Column{AnswersColumns[6]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "answers_users_answers",
				Columns:    []*schema.Column{AnswersColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_comments", Type: field.TypeInt, Nullable: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "vote_count", Type: field.TypeInt, Default: 0},
		{Name: "view_count", Type: field.TypeInt, Default: 0},
		{Name: "user_questions", Type: field.TypeInt, Nullable: true},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_users_questions",
				Columns:    []*schema.Column{QuestionsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "reputation", Type: field.TypeInt, Default: 0},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// VotesColumns holds the columns for the "votes" table.
	VotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "value", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_votes", Type: field.TypeInt, Nullable: true},
	}
	// VotesTable holds the schema information for the "votes" table.
	VotesTable = &schema.Table{
		Name:       "votes",
		Columns:    VotesColumns,
		PrimaryKey: []*schema.Column{VotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "votes_users_votes",
				Columns:    []*schema.Column{VotesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AnswerCommentsColumns holds the columns for the "answer_comments" table.
	AnswerCommentsColumns = []*schema.Column{
		{Name: "answer_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// AnswerCommentsTable holds the schema information for the "answer_comments" table.
	AnswerCommentsTable = &schema.Table{
		Name:       "answer_comments",
		Columns:    AnswerCommentsColumns,
		PrimaryKey: []*schema.Column{AnswerCommentsColumns[0], AnswerCommentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "answer_comments_answer_id",
				Columns:    []*schema.Column{AnswerCommentsColumns[0]},
				RefColumns: []*schema.Column{AnswersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "answer_comments_comment_id",
				Columns:    []*schema.Column{AnswerCommentsColumns[1]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// AnswerVotesColumns holds the columns for the "answer_votes" table.
	AnswerVotesColumns = []*schema.Column{
		{Name: "answer_id", Type: field.TypeInt},
		{Name: "vote_id", Type: field.TypeInt},
	}
	// AnswerVotesTable holds the schema information for the "answer_votes" table.
	AnswerVotesTable = &schema.Table{
		Name:       "answer_votes",
		Columns:    AnswerVotesColumns,
		PrimaryKey: []*schema.Column{AnswerVotesColumns[0], AnswerVotesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "answer_votes_answer_id",
				Columns:    []*schema.Column{AnswerVotesColumns[0]},
				RefColumns: []*schema.Column{AnswersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "answer_votes_vote_id",
				Columns:    []*schema.Column{AnswerVotesColumns[1]},
				RefColumns: []*schema.Column{VotesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuestionCommentsColumns holds the columns for the "question_comments" table.
	QuestionCommentsColumns = []*schema.Column{
		{Name: "question_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// QuestionCommentsTable holds the schema information for the "question_comments" table.
	QuestionCommentsTable = &schema.Table{
		Name:       "question_comments",
		Columns:    QuestionCommentsColumns,
		PrimaryKey: []*schema.Column{QuestionCommentsColumns[0], QuestionCommentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_comments_question_id",
				Columns:    []*schema.Column{QuestionCommentsColumns[0]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "question_comments_comment_id",
				Columns:    []*schema.Column{QuestionCommentsColumns[1]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuestionTagsColumns holds the columns for the "question_tags" table.
	QuestionTagsColumns = []*schema.Column{
		{Name: "question_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// QuestionTagsTable holds the schema information for the "question_tags" table.
	QuestionTagsTable = &schema.Table{
		Name:       "question_tags",
		Columns:    QuestionTagsColumns,
		PrimaryKey: []*schema.Column{QuestionTagsColumns[0], QuestionTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_tags_question_id",
				Columns:    []*schema.Column{QuestionTagsColumns[0]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "question_tags_tag_id",
				Columns:    []*schema.Column{QuestionTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuestionVotesColumns holds the columns for the "question_votes" table.
	QuestionVotesColumns = []*schema.Column{
		{Name: "question_id", Type: field.TypeInt},
		{Name: "vote_id", Type: field.TypeInt},
	}
	// QuestionVotesTable holds the schema information for the "question_votes" table.
	QuestionVotesTable = &schema.Table{
		Name:       "question_votes",
		Columns:    QuestionVotesColumns,
		PrimaryKey: []*schema.Column{QuestionVotesColumns[0], QuestionVotesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_votes_question_id",
				Columns:    []*schema.Column{QuestionVotesColumns[0]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "question_votes_vote_id",
				Columns:    []*schema.Column{QuestionVotesColumns[1]},
				RefColumns: []*schema.Column{VotesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnswersTable,
		CommentsTable,
		QuestionsTable,
		TagsTable,
		UsersTable,
		VotesTable,
		AnswerCommentsTable,
		AnswerVotesTable,
		QuestionCommentsTable,
		QuestionTagsTable,
		QuestionVotesTable,
	}
)

func init() {
	AnswersTable.ForeignKeys[0].RefTable = QuestionsTable
	AnswersTable.ForeignKeys[1].RefTable = UsersTable
	CommentsTable.ForeignKeys[0].RefTable = UsersTable
	QuestionsTable.ForeignKeys[0].RefTable = UsersTable
	VotesTable.ForeignKeys[0].RefTable = UsersTable
	AnswerCommentsTable.ForeignKeys[0].RefTable = AnswersTable
	AnswerCommentsTable.ForeignKeys[1].RefTable = CommentsTable
	AnswerVotesTable.ForeignKeys[0].RefTable = AnswersTable
	AnswerVotesTable.ForeignKeys[1].RefTable = VotesTable
	QuestionCommentsTable.ForeignKeys[0].RefTable = QuestionsTable
	QuestionCommentsTable.ForeignKeys[1].RefTable = CommentsTable
	QuestionTagsTable.ForeignKeys[0].RefTable = QuestionsTable
	QuestionTagsTable.ForeignKeys[1].RefTable = TagsTable
	QuestionVotesTable.ForeignKeys[0].RefTable = QuestionsTable
	QuestionVotesTable.ForeignKeys[1].RefTable = VotesTable
}
