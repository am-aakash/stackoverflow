// Code generated by ent, DO NOT EDIT.

package ent

import (
	"stackoverflow-clone/ent/answer"
	"stackoverflow-clone/ent/question"
	"stackoverflow-clone/ent/schema"
	"stackoverflow-clone/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	answerFields := schema.Answer{}.Fields()
	_ = answerFields
	// answerDescIsAccepted is the schema descriptor for is_accepted field.
	answerDescIsAccepted := answerFields[3].Descriptor()
	// answer.DefaultIsAccepted holds the default value on creation for the is_accepted field.
	answer.DefaultIsAccepted = answerDescIsAccepted.Default.(bool)
	// answerDescVoteCount is the schema descriptor for vote_count field.
	answerDescVoteCount := answerFields[4].Descriptor()
	// answer.DefaultVoteCount holds the default value on creation for the vote_count field.
	answer.DefaultVoteCount = answerDescVoteCount.Default.(int)
	questionFields := schema.Question{}.Fields()
	_ = questionFields
	// questionDescVoteCount is the schema descriptor for vote_count field.
	questionDescVoteCount := questionFields[4].Descriptor()
	// question.DefaultVoteCount holds the default value on creation for the vote_count field.
	question.DefaultVoteCount = questionDescVoteCount.Default.(int)
	// questionDescViewCount is the schema descriptor for view_count field.
	questionDescViewCount := questionFields[5].Descriptor()
	// question.DefaultViewCount holds the default value on creation for the view_count field.
	question.DefaultViewCount = questionDescViewCount.Default.(int)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescReputation is the schema descriptor for reputation field.
	userDescReputation := userFields[5].Descriptor()
	// user.DefaultReputation holds the default value on creation for the reputation field.
	user.DefaultReputation = userDescReputation.Default.(int)
}
