// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stackoverflow-clone/ent/answer"
	"stackoverflow-clone/ent/comment"
	"stackoverflow-clone/ent/predicate"
	"stackoverflow-clone/ent/question"
	"stackoverflow-clone/ent/user"
	"stackoverflow-clone/ent/vote"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerUpdate is the builder for updating Answer entities.
type AnswerUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerMutation
}

// Where appends a list predicates to the AnswerUpdate builder.
func (au *AnswerUpdate) Where(ps ...predicate.Answer) *AnswerUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetContent sets the "content" field.
func (au *AnswerUpdate) SetContent(s string) *AnswerUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableContent(s *string) *AnswerUpdate {
	if s != nil {
		au.SetContent(*s)
	}
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AnswerUpdate) SetCreatedAt(t time.Time) *AnswerUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableCreatedAt(t *time.Time) *AnswerUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AnswerUpdate) SetUpdatedAt(t time.Time) *AnswerUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableUpdatedAt(t *time.Time) *AnswerUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// SetIsAccepted sets the "is_accepted" field.
func (au *AnswerUpdate) SetIsAccepted(b bool) *AnswerUpdate {
	au.mutation.SetIsAccepted(b)
	return au
}

// SetNillableIsAccepted sets the "is_accepted" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableIsAccepted(b *bool) *AnswerUpdate {
	if b != nil {
		au.SetIsAccepted(*b)
	}
	return au
}

// SetVoteCount sets the "vote_count" field.
func (au *AnswerUpdate) SetVoteCount(i int) *AnswerUpdate {
	au.mutation.ResetVoteCount()
	au.mutation.SetVoteCount(i)
	return au
}

// SetNillableVoteCount sets the "vote_count" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableVoteCount(i *int) *AnswerUpdate {
	if i != nil {
		au.SetVoteCount(*i)
	}
	return au
}

// AddVoteCount adds i to the "vote_count" field.
func (au *AnswerUpdate) AddVoteCount(i int) *AnswerUpdate {
	au.mutation.AddVoteCount(i)
	return au
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (au *AnswerUpdate) SetAuthorID(id int) *AnswerUpdate {
	au.mutation.SetAuthorID(id)
	return au
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (au *AnswerUpdate) SetNillableAuthorID(id *int) *AnswerUpdate {
	if id != nil {
		au = au.SetAuthorID(*id)
	}
	return au
}

// SetAuthor sets the "author" edge to the User entity.
func (au *AnswerUpdate) SetAuthor(u *User) *AnswerUpdate {
	return au.SetAuthorID(u.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (au *AnswerUpdate) SetQuestionID(id int) *AnswerUpdate {
	au.mutation.SetQuestionID(id)
	return au
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (au *AnswerUpdate) SetNillableQuestionID(id *int) *AnswerUpdate {
	if id != nil {
		au = au.SetQuestionID(*id)
	}
	return au
}

// SetQuestion sets the "question" edge to the Question entity.
func (au *AnswerUpdate) SetQuestion(q *Question) *AnswerUpdate {
	return au.SetQuestionID(q.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (au *AnswerUpdate) AddCommentIDs(ids ...int) *AnswerUpdate {
	au.mutation.AddCommentIDs(ids...)
	return au
}

// AddComments adds the "comments" edges to the Comment entity.
func (au *AnswerUpdate) AddComments(c ...*Comment) *AnswerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCommentIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (au *AnswerUpdate) AddVoteIDs(ids ...int) *AnswerUpdate {
	au.mutation.AddVoteIDs(ids...)
	return au
}

// AddVotes adds the "votes" edges to the Vote entity.
func (au *AnswerUpdate) AddVotes(v ...*Vote) *AnswerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.AddVoteIDs(ids...)
}

// Mutation returns the AnswerMutation object of the builder.
func (au *AnswerUpdate) Mutation() *AnswerMutation {
	return au.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (au *AnswerUpdate) ClearAuthor() *AnswerUpdate {
	au.mutation.ClearAuthor()
	return au
}

// ClearQuestion clears the "question" edge to the Question entity.
func (au *AnswerUpdate) ClearQuestion() *AnswerUpdate {
	au.mutation.ClearQuestion()
	return au
}

// ClearComments clears all "comments" edges to the Comment entity.
func (au *AnswerUpdate) ClearComments() *AnswerUpdate {
	au.mutation.ClearComments()
	return au
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (au *AnswerUpdate) RemoveCommentIDs(ids ...int) *AnswerUpdate {
	au.mutation.RemoveCommentIDs(ids...)
	return au
}

// RemoveComments removes "comments" edges to Comment entities.
func (au *AnswerUpdate) RemoveComments(c ...*Comment) *AnswerUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCommentIDs(ids...)
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (au *AnswerUpdate) ClearVotes() *AnswerUpdate {
	au.mutation.ClearVotes()
	return au
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (au *AnswerUpdate) RemoveVoteIDs(ids ...int) *AnswerUpdate {
	au.mutation.RemoveVoteIDs(ids...)
	return au
}

// RemoveVotes removes "votes" edges to Vote entities.
func (au *AnswerUpdate) RemoveVotes(v ...*Vote) *AnswerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnswerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnswerUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnswerUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(answer.Table, answer.Columns, sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.SetField(answer.FieldContent, field.TypeString, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(answer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(answer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.IsAccepted(); ok {
		_spec.SetField(answer.FieldIsAccepted, field.TypeBool, value)
	}
	if value, ok := au.mutation.VoteCount(); ok {
		_spec.SetField(answer.FieldVoteCount, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedVoteCount(); ok {
		_spec.AddField(answer.FieldVoteCount, field.TypeInt, value)
	}
	if au.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.AuthorTable,
			Columns: []string{answer.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.AuthorTable,
			Columns: []string{answer.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.CommentsTable,
			Columns: answer.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !au.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.CommentsTable,
			Columns: answer.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.CommentsTable,
			Columns: answer.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.VotesTable,
			Columns: answer.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedVotesIDs(); len(nodes) > 0 && !au.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.VotesTable,
			Columns: answer.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.VotesTable,
			Columns: answer.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnswerUpdateOne is the builder for updating a single Answer entity.
type AnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnswerMutation
}

// SetContent sets the "content" field.
func (auo *AnswerUpdateOne) SetContent(s string) *AnswerUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableContent(s *string) *AnswerUpdateOne {
	if s != nil {
		auo.SetContent(*s)
	}
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AnswerUpdateOne) SetCreatedAt(t time.Time) *AnswerUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableCreatedAt(t *time.Time) *AnswerUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AnswerUpdateOne) SetUpdatedAt(t time.Time) *AnswerUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableUpdatedAt(t *time.Time) *AnswerUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// SetIsAccepted sets the "is_accepted" field.
func (auo *AnswerUpdateOne) SetIsAccepted(b bool) *AnswerUpdateOne {
	auo.mutation.SetIsAccepted(b)
	return auo
}

// SetNillableIsAccepted sets the "is_accepted" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableIsAccepted(b *bool) *AnswerUpdateOne {
	if b != nil {
		auo.SetIsAccepted(*b)
	}
	return auo
}

// SetVoteCount sets the "vote_count" field.
func (auo *AnswerUpdateOne) SetVoteCount(i int) *AnswerUpdateOne {
	auo.mutation.ResetVoteCount()
	auo.mutation.SetVoteCount(i)
	return auo
}

// SetNillableVoteCount sets the "vote_count" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableVoteCount(i *int) *AnswerUpdateOne {
	if i != nil {
		auo.SetVoteCount(*i)
	}
	return auo
}

// AddVoteCount adds i to the "vote_count" field.
func (auo *AnswerUpdateOne) AddVoteCount(i int) *AnswerUpdateOne {
	auo.mutation.AddVoteCount(i)
	return auo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (auo *AnswerUpdateOne) SetAuthorID(id int) *AnswerUpdateOne {
	auo.mutation.SetAuthorID(id)
	return auo
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableAuthorID(id *int) *AnswerUpdateOne {
	if id != nil {
		auo = auo.SetAuthorID(*id)
	}
	return auo
}

// SetAuthor sets the "author" edge to the User entity.
func (auo *AnswerUpdateOne) SetAuthor(u *User) *AnswerUpdateOne {
	return auo.SetAuthorID(u.ID)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (auo *AnswerUpdateOne) SetQuestionID(id int) *AnswerUpdateOne {
	auo.mutation.SetQuestionID(id)
	return auo
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableQuestionID(id *int) *AnswerUpdateOne {
	if id != nil {
		auo = auo.SetQuestionID(*id)
	}
	return auo
}

// SetQuestion sets the "question" edge to the Question entity.
func (auo *AnswerUpdateOne) SetQuestion(q *Question) *AnswerUpdateOne {
	return auo.SetQuestionID(q.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (auo *AnswerUpdateOne) AddCommentIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.AddCommentIDs(ids...)
	return auo
}

// AddComments adds the "comments" edges to the Comment entity.
func (auo *AnswerUpdateOne) AddComments(c ...*Comment) *AnswerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCommentIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (auo *AnswerUpdateOne) AddVoteIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.AddVoteIDs(ids...)
	return auo
}

// AddVotes adds the "votes" edges to the Vote entity.
func (auo *AnswerUpdateOne) AddVotes(v ...*Vote) *AnswerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.AddVoteIDs(ids...)
}

// Mutation returns the AnswerMutation object of the builder.
func (auo *AnswerUpdateOne) Mutation() *AnswerMutation {
	return auo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (auo *AnswerUpdateOne) ClearAuthor() *AnswerUpdateOne {
	auo.mutation.ClearAuthor()
	return auo
}

// ClearQuestion clears the "question" edge to the Question entity.
func (auo *AnswerUpdateOne) ClearQuestion() *AnswerUpdateOne {
	auo.mutation.ClearQuestion()
	return auo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (auo *AnswerUpdateOne) ClearComments() *AnswerUpdateOne {
	auo.mutation.ClearComments()
	return auo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (auo *AnswerUpdateOne) RemoveCommentIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.RemoveCommentIDs(ids...)
	return auo
}

// RemoveComments removes "comments" edges to Comment entities.
func (auo *AnswerUpdateOne) RemoveComments(c ...*Comment) *AnswerUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCommentIDs(ids...)
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (auo *AnswerUpdateOne) ClearVotes() *AnswerUpdateOne {
	auo.mutation.ClearVotes()
	return auo
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (auo *AnswerUpdateOne) RemoveVoteIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.RemoveVoteIDs(ids...)
	return auo
}

// RemoveVotes removes "votes" edges to Vote entities.
func (auo *AnswerUpdateOne) RemoveVotes(v ...*Vote) *AnswerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the AnswerUpdate builder.
func (auo *AnswerUpdateOne) Where(ps ...predicate.Answer) *AnswerUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnswerUpdateOne) Select(field string, fields ...string) *AnswerUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Answer entity.
func (auo *AnswerUpdateOne) Save(ctx context.Context) (*Answer, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnswerUpdateOne) SaveX(ctx context.Context) *Answer {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnswerUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AnswerUpdateOne) sqlSave(ctx context.Context) (_node *Answer, err error) {
	_spec := sqlgraph.NewUpdateSpec(answer.Table, answer.Columns, sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Answer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answer.FieldID)
		for _, f := range fields {
			if !answer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != answer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.SetField(answer.FieldContent, field.TypeString, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(answer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(answer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.IsAccepted(); ok {
		_spec.SetField(answer.FieldIsAccepted, field.TypeBool, value)
	}
	if value, ok := auo.mutation.VoteCount(); ok {
		_spec.SetField(answer.FieldVoteCount, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedVoteCount(); ok {
		_spec.AddField(answer.FieldVoteCount, field.TypeInt, value)
	}
	if auo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.AuthorTable,
			Columns: []string{answer.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.AuthorTable,
			Columns: []string{answer.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.CommentsTable,
			Columns: answer.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !auo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.CommentsTable,
			Columns: answer.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.CommentsTable,
			Columns: answer.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.VotesTable,
			Columns: answer.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedVotesIDs(); len(nodes) > 0 && !auo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.VotesTable,
			Columns: answer.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   answer.VotesTable,
			Columns: answer.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Answer{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
