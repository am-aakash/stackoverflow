// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stackoverflow-clone/ent/answer"
	"stackoverflow-clone/ent/comment"
	"stackoverflow-clone/ent/question"
	"stackoverflow-clone/ent/tag"
	"stackoverflow-clone/ent/user"
	"stackoverflow-clone/ent/vote"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	mutation *QuestionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (qc *QuestionCreate) SetTitle(s string) *QuestionCreate {
	qc.mutation.SetTitle(s)
	return qc
}

// SetContent sets the "content" field.
func (qc *QuestionCreate) SetContent(s string) *QuestionCreate {
	qc.mutation.SetContent(s)
	return qc
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestionCreate) SetCreatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QuestionCreate) SetUpdatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetVoteCount sets the "vote_count" field.
func (qc *QuestionCreate) SetVoteCount(i int) *QuestionCreate {
	qc.mutation.SetVoteCount(i)
	return qc
}

// SetNillableVoteCount sets the "vote_count" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableVoteCount(i *int) *QuestionCreate {
	if i != nil {
		qc.SetVoteCount(*i)
	}
	return qc
}

// SetViewCount sets the "view_count" field.
func (qc *QuestionCreate) SetViewCount(i int) *QuestionCreate {
	qc.mutation.SetViewCount(i)
	return qc
}

// SetNillableViewCount sets the "view_count" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableViewCount(i *int) *QuestionCreate {
	if i != nil {
		qc.SetViewCount(*i)
	}
	return qc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (qc *QuestionCreate) SetAuthorID(id int) *QuestionCreate {
	qc.mutation.SetAuthorID(id)
	return qc
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (qc *QuestionCreate) SetNillableAuthorID(id *int) *QuestionCreate {
	if id != nil {
		qc = qc.SetAuthorID(*id)
	}
	return qc
}

// SetAuthor sets the "author" edge to the User entity.
func (qc *QuestionCreate) SetAuthor(u *User) *QuestionCreate {
	return qc.SetAuthorID(u.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (qc *QuestionCreate) AddAnswerIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddAnswerIDs(ids...)
	return qc
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (qc *QuestionCreate) AddAnswers(a ...*Answer) *QuestionCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qc.AddAnswerIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (qc *QuestionCreate) AddCommentIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddCommentIDs(ids...)
	return qc
}

// AddComments adds the "comments" edges to the Comment entity.
func (qc *QuestionCreate) AddComments(c ...*Comment) *QuestionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return qc.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (qc *QuestionCreate) AddTagIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddTagIDs(ids...)
	return qc
}

// AddTags adds the "tags" edges to the Tag entity.
func (qc *QuestionCreate) AddTags(t ...*Tag) *QuestionCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return qc.AddTagIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (qc *QuestionCreate) AddVoteIDs(ids ...int) *QuestionCreate {
	qc.mutation.AddVoteIDs(ids...)
	return qc
}

// AddVotes adds the "votes" edges to the Vote entity.
func (qc *QuestionCreate) AddVotes(v ...*Vote) *QuestionCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return qc.AddVoteIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qc *QuestionCreate) Mutation() *QuestionMutation {
	return qc.mutation
}

// Save creates the Question in the database.
func (qc *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	qc.defaults()
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestionCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestionCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestionCreate) defaults() {
	if _, ok := qc.mutation.VoteCount(); !ok {
		v := question.DefaultVoteCount
		qc.mutation.SetVoteCount(v)
	}
	if _, ok := qc.mutation.ViewCount(); !ok {
		v := question.DefaultViewCount
		qc.mutation.SetViewCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestionCreate) check() error {
	if _, ok := qc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Question.title"`)}
	}
	if _, ok := qc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Question.content"`)}
	}
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Question.created_at"`)}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Question.updated_at"`)}
	}
	if _, ok := qc.mutation.VoteCount(); !ok {
		return &ValidationError{Name: "vote_count", err: errors.New(`ent: missing required field "Question.vote_count"`)}
	}
	if _, ok := qc.mutation.ViewCount(); !ok {
		return &ValidationError{Name: "view_count", err: errors.New(`ent: missing required field "Question.view_count"`)}
	}
	return nil
}

func (qc *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestionCreate) createSpec() (*Question, *sqlgraph.CreateSpec) {
	var (
		_node = &Question{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(question.Table, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	)
	if value, ok := qc.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := qc.mutation.Content(); ok {
		_spec.SetField(question.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qc.mutation.VoteCount(); ok {
		_spec.SetField(question.FieldVoteCount, field.TypeInt, value)
		_node.VoteCount = value
	}
	if value, ok := qc.mutation.ViewCount(); ok {
		_spec.SetField(question.FieldViewCount, field.TypeInt, value)
		_node.ViewCount = value
	}
	if nodes := qc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.AuthorTable,
			Columns: []string{question.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_questions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.CommentsTable,
			Columns: question.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.TagsTable,
			Columns: question.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.VotesTable,
			Columns: question.VotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionCreateBulk is the builder for creating many Question entities in bulk.
type QuestionCreateBulk struct {
	config
	err      error
	builders []*QuestionCreate
}

// Save creates the Question entities in the database.
func (qcb *QuestionCreateBulk) Save(ctx context.Context) ([]*Question, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Question, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestionCreateBulk) SaveX(ctx context.Context) []*Question {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestionCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}
